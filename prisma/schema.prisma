// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Workspace {
  id           String       @id @default(cuid())
  clerkId      String       @unique
  name         String
  topics       Topic[]
  categories   Category[]
  emailEntries EmailEntry[]
  emailUseage  EmailUsage?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([clerkId, id])
}

model Category {
  id           String                 @id @default(cuid())
  name         String
  workspaceId  String
  workspace    Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  emailEntries CategoryToEmailEntry[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@index([workspaceId])
  @@unique([workspaceId, name]) // Prevent duplicate category names per workspace
}

model EmailEntry {
  id          String                 @id @default(cuid())
  email       String
  name        String?
  workspaceId String
  workspace   Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  categories  CategoryToEmailEntry[]
  invitations Invitation[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@index([workspaceId])
  @@index([email])
  @@unique([workspaceId, email]) // Prevent duplicate emails per workspace
}

// Pivot table for many-to-many relation between Category and EmailEntry
model CategoryToEmailEntry {
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  emailEntry   EmailEntry @relation(fields: [emailEntryId], references: [id], onDelete: Cascade)
  emailEntryId String
  createdAt    DateTime   @default(now())

  @@id([categoryId, emailEntryId])
  @@index([categoryId])
  @@index([emailEntryId])
}

enum InviteStatus {
    SENT 
    FAILED
    PENDING
}

model Invitation {
  id           String     @id @default(cuid())
  emailEntryId String
  emailEntry   EmailEntry @relation(fields: [emailEntryId], references: [id], onDelete: Cascade)
  topicId      String
  topic        Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  token        String     @unique @default(cuid())
  used         Boolean    @default(false)
  sentAt       DateTime?  
  submittedAt  DateTime?
  expiresAt    DateTime?  // Consider adding expiration
  feedback     Feedback[]
  inviteStatus InviteStatus @default(PENDING)
  error        String?

  @@index([emailEntryId])
  @@index([topicId])
  @@index([token])
  @@index([used])
  @@unique([topicId, emailEntryId])
}

model Topic {
  id          String       @id @default(cuid())
  title       String
  description String
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  feedbacks   Feedback[]
  invitations Invitation[]
  isActive    Boolean      @default(true) // Consider adding status field
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([workspaceId])
  @@index([isActive])
  @@index([title])
}

model Feedback {
  id           String     @id @default(cuid())
  content      String
  invitationId String
  topicId      String
  topic        Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  invitation   Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  submittedAt  DateTime   @default(now())
  rating       Int?       // Consider adding rating field
  isAnonymous  Boolean    @default(false) // Consider adding anonymity option

  @@index([invitationId])
  @@index([topicId])
  @@index([submittedAt])
}

model EmailUsage {
  id String @id @default(cuid())
  workspaceId String @unique 
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  month DateTime
  sentCount Int @default(0)

  @@unique([workspaceId, month])
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt 

}


model Order {
  id                String       @id @default(cuid())
  razorPayOrderId   String       @unique
  amount            Int
  currency          String       @default("INR")
  clerkId           String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  pricingId         String
  pricing           Pricing      @relation(fields: [pricingId], references: [id])
  status            OrderStatus  @default(CREATED)
  subscription      Subscription
  payments          Payment[]    
}


enum OrderStatus {
  CREATED
  PAID
  FAILED
  EXPIRED
  CANCELLED
  REFUNDED
}

enum Subscription {
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
}

model Payment {
  id                  String      @id @default(cuid())
  razorPayPaymentId   String      @unique
  razorPayOrderId     String
  order               Order       @relation(fields: [orderId], references: [id])
  orderId             String      
  razorPaySignature   String
  status              Status      @default(PENDING)
  isVerified          Boolean     @default(false)
  failureReason       String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  activeSubscription  ActiveSubscription?

  @@index([razorPayPaymentId, status, isVerified])
}


enum Status {
  SUCCESS
  FAILED
  PENDING
  REFUNDED
}

model ActiveSubscription {
  id              String      @id @default(cuid())
  startDate       DateTime    @default(now())
  clerkId         String
  expiryDate      DateTime
  isCancelled     Boolean     @default(false)
  cancelledAt     DateTime?
  payment         Payment     @relation(fields: [paymentId], references: [id])
  paymentId       String      @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  pricingId       String      @unique
  pricing         Pricing     @relation(fields: [pricingId], references: [id])
}

model Pricing {
  id                 String        @id @default(cuid())
  admin              String        // Clerk ID of the admin who created the plan
  name               String        // e.g., "Monthly"
  description        String        // e.g., "Perfect for getting started"
  price              Int           // Amount in paise (if INR)
  period             String        // e.g., "month", "year"
  popular            Boolean       @default(false)
  savings            String?       // Optional string like "Save 25%"
  currency           String        @default("INR")
  validity           Int           // Duration in days (e.g., 30 for monthly)
  emailUsageLimit    Int           @default(100)
  subscription       Subscription  @unique
  features           Feature[]     // One-to-many relation
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  updatedBy          String?
  activeSubscription ActiveSubscription[]
  orders             Order[]       // Opposite relation to Order.pricing
}


model Feature {
  id        String   @id @default(cuid())
  text      String   // e.g., "Up to 10,000 requests"
  pricing   Pricing  @relation(fields: [pricingId], references: [id], onDelete: Cascade)
  pricingId String

  @@index([pricingId])
}
